[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "autoops-retail-optimization"
version = "0.1.0"
description = "Multi-agent AI system for retail optimization using AWS Strands Agents"
authors = [
    {name = "errchh", email = "example@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    # AWS Strands Agents Framework (core multi-agent framework)
    # "strands>=0.1.0",  # Temporarily commented out due to build issues
    # AWS SDK and Bedrock (for Claude integration)
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    # Vector Database (for agent memory)
    "chromadb>=0.4.0",
    # Web Framework and API
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    # Data Processing and Validation
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "numpy>=1.24.0",
    # HTTP Client
    "httpx>=0.25.0",
    # Configuration Management
    "python-dotenv>=1.0.0",
    # Logging and Monitoring
    "structlog>=23.2.0",
    # Observability and Tracing
    "langfuse>=3.0.0",
    # Additional utilities
    "python-multipart>=0.0.6", # For form data handling in FastAPI
    # Missing dependencies for imports
    "psutil>=5.9.0",
    "requests>=2.31.0",
]

[project.optional-dependencies]
dev = [
    # Testing Framework
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    
    # Code Formatting and Linting
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "ruff>=0.1.6",
    
    # Development Tools
    "pre-commit>=3.5.0",
    
    # Additional testing utilities
    "anyio>=4.0.0",
]

dashboard = [
    # Note: React dashboard dependencies are managed separately in dashboard/package.json
    # This section is for Python-based dashboard tools if needed
    "streamlit>=1.28.0",  # Alternative Python dashboard option
    "pandas>=2.1.0",
    "plotly>=5.15.0",
]

simulation = [
    # Additional dependencies for enhanced simulation
    "pandas>=2.1.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
]

[project.urls]
Homepage = "https://github.com/errchh/aws-ai-hackathon-autoops"
Repository = "https://github.com/errchh/aws-ai-hackathon-autoops"
Issues = "https://github.com/errchh/aws-ai-hackathon-autoops/issues"

[tool.hatch.build.targets.wheel]
packages = ["agents", "tools", "models", "api", "config", "simulation"]

[project.scripts]
autoops-server = "api.main:main"
autoops-demo = "examples.error_handling_integration:demonstrate_error_handling"

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-asyncio",
    "pytest-mock",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=agents --cov=api --cov=models --cov=config {args:tests}"
lint = "ruff check {args:.}"
format = "black {args:.}"
format-check = "black --check {args:.}"
type-check = "mypy {args:agents api models config}"

# Dashboard build configuration (for reference)
# The React dashboard is built separately using Node.js/npm
# To build the dashboard:
# cd dashboard && npm install && npm run build
# The built files will be in dashboard/dist/

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["agents", "tools", "models", "api", "config", "simulation", "dashboard"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--asyncio-mode=auto",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "agents: marks tests related to agent functionality",
    "api: marks tests related to API endpoints",
    "error_handling: marks tests related to error handling and resilience",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["agents", "api", "models", "config", "simulation", "tools"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-mock>=3.15.1",
]
